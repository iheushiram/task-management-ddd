generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())
    name String
    email String @unique
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    isActive Boolean @default(true) @map("is_active")

    // リレーション
    ownedProjects Project[] @relation("ProjectOwner")
    projectMembers ProjectMember[]
    assignedTasks Task[]

    @@map("users")
}

model Project {
    id String @id @default(uuid())
    name String
    ownerId String @map("owner_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // リレーション
    owner User @relation("ProjectOwner", fields: [ownerId], references: [id])
    members ProjectMember[]
    tasks Task[]

    @@map("projects")
}

model ProjectMember {
    id String @id @default(uuid())
    projectId String @map("project_id")
    userId String @map("user_id")
    createdAt DateTime @default(now()) @map("created_at")

    // リレーション
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([projectId, userId])
    @@map("project_members")
}

model Task {
    id String @id @default(uuid())
    title String
    description String
    status String @default("TODO")
    priority String @default("MEDIUM")
    assigneeId String @map("assignee_id")
    projectId String? @map("project_id")
    dueDate DateTime? @map("due_date")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // リレーション
    assignee User @relation(fields: [assigneeId], references: [id])
    project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

    @@map("tasks")
}





